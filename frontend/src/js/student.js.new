// Sistema de Painel do Estudante
// Arquivo: student.js

// Estado global da aplicação
const AppState = {
    data: {},
    set(key, value) {
        this.data[key] = value;
        console.log(`Estado atualizado: ${key}`, value);
    },
    get(key) {
        return this.data[key];
    }
};

// Sistema de notificações Toast
const Toast = {
    container: null,

    init() {
        if (!this.container) {
            this.container = document.createElement("div");
            this.container.id = "toast-container";
            this.container.className = "fixed top-4 right-4 z-50 space-y-2";
            document.body.appendChild(this.container);
        }
    },

    show(message, type = "info") {
        this.init();

        const types = {
            error: { class: "bg-red-500", icon: "exclamation-triangle" },
            success: { class: "bg-green-500", icon: "check-circle" },
            warning: { class: "bg-yellow-500", icon: "exclamation-circle" },
            info: { class: "bg-blue-500", icon: "info-circle" }
        };

        const config = types[type] || types.info;
        const toast = document.createElement("div");
        toast.className = `${config.class} text-white px-4 py-3 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full opacity-0`;
        toast.innerHTML = `
      <div class="flex items-center">
        <i class="fas fa-${config.icon} mr-2"></i>
        <span>${message}</span>
      </div>
    `;

        this.container.appendChild(toast);

        requestAnimationFrame(() => {
            toast.classList.remove("translate-x-full", "opacity-0");
        });

        setTimeout(() => {
            toast.classList.add("translate-x-full", "opacity-0");
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }
};

// API - Sistema de requisições
const API = {
    baseUrl: 'http://localhost:3000', // URL base da API

    async request(endpoint, options = {}) {
        const url = this.baseUrl + endpoint;
        console.log(`API Request: ${url}`);

        const token = localStorage.getItem('token');
        if (!token) {
            throw new Error('Token não encontrado');
        }

        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        };

        try {
            const response = await fetch(url, { ...defaultOptions, ...options });

            if (!response.ok) {
                if (response.status === 401) {
                    localStorage.removeItem('token');
                    window.location.href = '/login.html';
                    throw new Error('Sessão expirada. Por favor, faça login novamente.');
                }
                throw new Error(`Erro na requisição: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error(`Erro na API ${endpoint}:`, error);
            throw error;
        }
    }
};

// Sistema de XP e Níveis
const LevelSystem = {
    baseXP: 100, // XP base para o primeiro nível
    multiplier: 1.5, // Multiplicador de dificuldade por nível

    calculateNextLevelXP(level) {
        return Math.round(this.baseXP * Math.pow(this.multiplier, level - 1));
    },

    calculateCurrentLevelXP(totalXP) {
        let level = 1;
        let xpForNextLevel = this.baseXP;
        let accumulatedXP = 0;

        while (totalXP >= accumulatedXP + xpForNextLevel) {
            accumulatedXP += xpForNextLevel;
            level++;
            xpForNextLevel = this.calculateNextLevelXP(level);
        }

        return {
            level,
            currentXP: totalXP - accumulatedXP,
            nextLevelXP: xpForNextLevel,
            totalXP
        };
    }
};

// Funções de inicialização e carregamento
async function initializeApp() {
    console.log('Inicializando aplicação do estudante...');
    showLoadingStates();

    try {
        const [userData, missionsData, submissionsData] = await Promise.all([
            loadUserProfile(),
            loadMissions(),
            loadSubmissions()
        ]);

        AppState.set('user', userData);
        AppState.set('missions', missionsData);
        AppState.set('submissions', submissionsData);

        updateUserInterface(userData);
        updateMissionsInterface(missionsData);
        updateSubmissionsInterface(submissionsData);
        setupMissionSubmission();

        hideLoadingStates();
        console.log('Aplicação inicializada com sucesso');
    } catch (error) {
        console.error('Erro ao inicializar a aplicação:', error);
        Toast.show('Erro ao carregar os dados. Por favor, recarregue a página.', 'error');
        hideLoadingStates();
    }
}

function showLoadingStates() {
    const elements = ['student-name', 'student-level', 'student-class', 'total-xp', 'current-xp', 'next-level-xp'];
    elements.forEach(id => {
        const element = document.getElementById(id);
        if (element) element.textContent = 'Carregando...';
    });
}

function hideLoadingStates() {
    const loadingElements = document.querySelectorAll('.loading-animation');
    loadingElements.forEach(el => el.remove());
}

async function loadUserProfile() {
    console.log('Carregando perfil do usuário...');
    try {
        return await API.request('/usuarios/me');
    } catch (error) {
        console.error('Erro ao carregar perfil:', error);
        Toast.show('Erro ao carregar seu perfil', 'error');
        throw error;
    }
}

async function loadMissions() {
    console.log('Carregando missões...');
    try {
        return await API.request('/missoes');
    } catch (error) {
        console.error('Erro ao carregar missões:', error);
        Toast.show('Erro ao carregar missões', 'error');
        throw error;
    }
}

async function loadSubmissions() {
    console.log('Carregando submissões...');
    try {
        return await API.request('/submissoes/my-submissions');
    } catch (error) {
        console.error('Erro ao carregar submissões:', error);
        Toast.show('Erro ao carregar submissões', 'error');
        throw error;
    }
}

function updateUserInterface(userData) {
    console.log('Atualizando interface do usuário:', userData);
    
    // Calcular nível e XP
    const xpInfo = LevelSystem.calculateCurrentLevelXP(userData.xp || 0);
    console.log('Informações de XP calculadas:', xpInfo);

    // Atualizar elementos da interface
    const elements = {
        'student-name': userData.username || 'Aluno',
        'student-level': `Nível ${xpInfo.level}`,
        'student-class': userData.class || 'Não definida',
        'total-xp': xpInfo.totalXP,
        'current-xp': xpInfo.currentXP,
        'next-level-xp': xpInfo.nextLevelXP,
        'student-year': `${userData.year || 1}º ano`
    };

    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    });

    // Atualizar barra de progresso
    const progress = Math.min(Math.round((xpInfo.currentXP / xpInfo.nextLevelXP) * 100), 100);
    const progressBar = document.getElementById('xp-bar');
    const progressPercentage = document.getElementById('progress-percentage');
    const remainingXp = document.getElementById('remaining-xp');

    if (progressBar) progressBar.style.width = `${progress}%`;
    if (progressPercentage) progressPercentage.textContent = `${progress}%`;
    if (remainingXp) remainingXp.textContent = xpInfo.nextLevelXP - xpInfo.currentXP;
}

function updateMissionsInterface(missions) {
    console.log('Atualizando interface de missões:', missions);
    const missionsList = document.getElementById('missions');
    if (!missionsList) {
        console.error('Elemento de missões não encontrado');
        return;
    }

    missionsList.innerHTML = '';

    if (missions.length === 0) {
        missionsList.innerHTML = `
            <div class="col-span-full text-center py-12">
                <i class="fas fa-scroll text-gray-400 text-4xl mb-4"></i>
                <p class="text-gray-500">Nenhuma missão disponível no momento.</p>
            </div>
        `;
        return;
    }

    missions.forEach(mission => {
        const card = document.createElement('div');
        card.className = 'bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-300';
        card.innerHTML = `
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-xl font-bold text-gray-800">${mission.title}</h3>
                <span class="bg-blue-100 text-blue-800 text-sm font-semibold px-3 py-1 rounded-full">
                    ${mission.xp} XP
                </span>
            </div>
            <p class="text-gray-600 mb-4">${mission.description}</p>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">
                    <i class="fas fa-users mr-1"></i> ${mission.targetClass}
                </span>
                <span class="text-sm text-gray-500">
                    <i class="fas fa-info-circle mr-1"></i> Use o formulário abaixo para enviar esta missão
                </span>
            </div>
        `;
        missionsList.appendChild(card);
    });

    updateMissionCounters(missions);
    updateMissionSelect(missions);
}

function updateMissionCounters(missions) {
    const total = document.getElementById('total-missions');
    const completed = document.getElementById('completed-missions');
    const pending = document.getElementById('pending-missions');

    if (total) total.textContent = missions.length;
    if (completed) completed.textContent = missions.filter(m => m.status === 'completed').length;
    if (pending) pending.textContent = missions.filter(m => m.status === 'active').length;
}

function setupMissionSubmission() {
    const missionSelect = document.getElementById('mission-select');
    const codeUpload = document.getElementById('code-upload');
    const submitButton = document.getElementById('submit-code-btn');

    if (!missionSelect || !codeUpload || !submitButton) {
        console.error('Elementos do formulário de submissão não encontrados');
        return;
    }

    submitButton.addEventListener('click', async (e) => {
        e.preventDefault();

        if (!missionSelect.value) {
            Toast.show('Selecione uma missão para enviar', 'warning');
            return;
        }

        if (!codeUpload.files || codeUpload.files.length === 0) {
            Toast.show('Selecione pelo menos um arquivo para enviar', 'warning');
            return;
        }

        const formData = new FormData();
        formData.append('missionId', missionSelect.value);
        Array.from(codeUpload.files).forEach(file => {
            formData.append('files', file);
        });

        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Enviando...';

        try {
            await API.request('/submissoes', {
                method: 'POST',
                body: formData,
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            Toast.show('Missão enviada com sucesso!', 'success');
            missionSelect.value = '';
            codeUpload.value = '';

            const submissions = await loadSubmissions();
            updateSubmissionsInterface(submissions);
        } catch (error) {
            console.error('Erro ao enviar missão:', error);
            Toast.show('Erro ao enviar missão. Tente novamente.', 'error');
        } finally {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane mr-2"></i>Enviar Código';
        }
    });
}

function updateMissionSelect(missions) {
    const missionSelect = document.getElementById('mission-select');
    if (!missionSelect) return;

    missionSelect.innerHTML = '<option value="">Selecione uma missão para enviar</option>';
    missions.forEach(mission => {
        missionSelect.innerHTML += `
            <option value="${mission.id}">${mission.title} (${mission.xp} XP)</option>
        `;
    });
}

function updateSubmissionsInterface(submissions) {
    console.log('Atualizando interface de submissões:', submissions);
    const submissionsList = document.getElementById('submission-history');
    if (!submissionsList) return;

    submissionsList.innerHTML = '';

    if (submissions.length === 0) {
        submissionsList.innerHTML = `
            <div class="text-center py-12">
                <i class="fas fa-history text-gray-400 text-4xl mb-4"></i>
                <p class="text-gray-500">Nenhuma submissão encontrada.</p>
            </div>
        `;
        return;
    }

    submissions.forEach(submission => {
        const statusColors = {
            pending: 'bg-yellow-100 text-yellow-800',
            approved: 'bg-green-100 text-green-800',
            rejected: 'bg-red-100 text-red-800'
        };

        const card = document.createElement('div');
        card.className = 'bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-300';
        card.innerHTML = `
            <div class="flex justify-between items-start mb-4">
                <div>
                    <h3 class="text-lg font-semibold text-gray-800">${submission.missionTitle}</h3>
                    <p class="text-sm text-gray-500">
                        Enviado em ${new Date(submission.submittedAt).toLocaleString()}
                    </p>
                </div>
                <span class="${statusColors[submission.status]} px-3 py-1 rounded-full text-sm font-medium">
                    ${submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}
                </span>
            </div>
            ${submission.feedback ? `
                <div class="mt-4 p-4 bg-gray-50 rounded-lg">
                    <h4 class="text-sm font-semibold text-gray-700 mb-2">Feedback do Mestre:</h4>
                    <p class="text-gray-600">${submission.feedback}</p>
                </div>
            ` : ''}
        `;
        submissionsList.appendChild(card);
    });
}

document.addEventListener('DOMContentLoaded', initializeApp);
