// Teste Espec√≠fico para Cria√ß√£o de Miss√µes
// Execute: node test-mission-creation.js

const http = require('http');

console.log('üß™ Teste de Cria√ß√£o de Miss√µes');
console.log('='.repeat(40));

// Primeiro, vamos testar se o servidor est√° respondendo
async function testServerConnection() {
  return new Promise((resolve) => {
    const req = http.get('http://localhost:3000', (res) => {
      console.log(`‚úÖ Servidor responde: Status ${res.statusCode}`);
      resolve(true);
    });

    req.on('error', (err) => {
      console.log(`‚ùå Servidor n√£o responde: ${err.message}`);
      resolve(false);
    });

    req.setTimeout(3000, () => {
      req.destroy();
      console.log(`‚è∞ Timeout na conex√£o com servidor`);
      resolve(false);
    });
  });
}

// Testar autentica√ß√£o (deve dar 401 - esperado)
async function testAuthEndpoint() {
  return new Promise((resolve) => {
    const req = http.get('http://localhost:3000/missoes', (res) => {
      if (res.statusCode === 401) {
        console.log(`‚úÖ Endpoint /missoes requer autentica√ß√£o (401 - correto)`);
        resolve(true);
      } else {
        console.log(`‚ö†Ô∏è Endpoint /missoes retornou ${res.statusCode} (esperado 401)`);
        resolve(false);
      }
    });

    req.on('error', (err) => {
      console.log(`‚ùå Erro ao testar /missoes: ${err.message}`);
      resolve(false);
    });

    req.setTimeout(3000, () => {
      req.destroy();
      console.log(`‚è∞ Timeout no teste de autentica√ß√£o`);
      resolve(false);
    });
  });
}

// Fun√ß√£o principal de teste
async function runMissionTests() {
  console.log('1. Testando conex√£o com servidor...');
  const serverOk = await testServerConnection();
  
  if (!serverOk) {
    console.log('\n‚ùå PROBLEMA: Servidor n√£o est√° respondendo');
    console.log('üîß Solu√ß√£o:');
    console.log('   cd backend');
    console.log('   node server.js');
    return;
  }
  
  console.log('\n2. Testando endpoint de miss√µes...');
  const authOk = await testAuthEndpoint();
  
  if (!authOk) {
    console.log('\n‚ö†Ô∏è PROBLEMA: Endpoint de miss√µes n√£o responde corretamente');
    console.log('üîß Verificar:');
    console.log('   - Se as rotas est√£o configuradas corretamente');
    console.log('   - Se n√£o h√° erros no console do servidor');
    return;
  }
  
  console.log('\n‚úÖ SERVIDOR FUNCIONANDO CORRETAMENTE');
  console.log('\nüîç Se ainda h√° "Erro ao conectar com o servidor":');
  console.log('   1. Verifique o console do browser (F12)');
  console.log('   2. Verifique se est√° logado como mestre');
  console.log('   3. Verifique a URL do frontend (deve ser uma das permitidas)');
  console.log('   4. Verifique se o token est√° v√°lido');
  
  console.log('\nüåê URLs testadas:');
  console.log('   - Backend: http://localhost:3000 ‚úÖ');
  console.log('   - Miss√µes: http://localhost:3000/missoes ‚úÖ (401 - esperado)');
  
  console.log('\nüí° URLs permitidas para frontend:');
  console.log('   - http://localhost:5173 (Vite padr√£o)');
  console.log('   - http://localhost:5174');
  console.log('   - http://localhost:5175');
  console.log('   - http://127.0.0.1:5500 (Live Server)');
  
  console.log('\nüõ†Ô∏è Debug adicional:');
  console.log('   1. Abrir DevTools (F12) no browser');
  console.log('   2. Aba Console - verificar erros JavaScript');
  console.log('   3. Aba Network - verificar requisi√ß√µes falhando');
  console.log('   4. Verificar se localStorage tem token v√°lido');
}

runMissionTests().catch(console.error);
